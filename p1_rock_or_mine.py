# -*- coding: utf-8 -*-
"""P1 - rock or mine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ac6_xghIDNsDrlQcGVuvNSau5qhVSZHW

import the dependencies
"""

from os import fork
import numpy as np #arrays
import pandas as pd #dataframe
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#load
sonar_data = pd.read_csv("/content/Copy of sonar data.csv", header = None)

#top 5 values
sonar_data.head()

#columns and rows
sonar_data.shape

#main features iow statistical measure
#25% of values are less than 0.013350
sonar_data.describe()

#number of M vs R
sonar_data[60].value_counts()

sonar_data.groupby(60).mean()

#separating data and labels
# axis: 0 for row and 1 for column
X = sonar_data.drop(columns = 60, axis = 1)
Y = sonar_data[60]

print(X)
print(Y)

#train and test split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify = Y, random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

# model training
model = LogisticRegression()

print(X_train)
print(Y_train)

#train logregr model with training data

model.fit(X_train, Y_train)

# model evaluation
# 1. accuracy

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Training accuracy:", training_data_accuracy)

# model evaluation
# 1. accuracy

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("Testing accuracy:", test_data_accuracy)

#make a predictive system
input_data = (0.0200,0.0371,0.0428,0.0207,0.0954,0.0986,0.1539,0.1601,0.3109,0.2111,0.1609,0.1582,0.2238,0.0645,0.0660,0.2273,0.3100,0.2999,0.5078,0.4797,0.5783,0.5071,0.4328,0.5550,0.6711,0.6415,0.7104,0.8080,0.6791,0.3857,0.1307,0.2604,0.5121,0.7547,0.8537,0.8507,0.6692,0.6097,0.4943,0.2744,0.0510,0.2834,0.2825,0.4256,0.2641,0.1386,0.1051,0.1343,0.0383,0.0324,0.0232,0.0027,0.0065,0.0159,0.0072,0.0167,0.0180,0.0084,0.0090,0.0032)

# change input data to numpy array
input_data_numpy = np.asarray(input_data)

print(input_data)

#reshape numpy array to make a prediction for one instance
input_data_reshaped = input_data_numpy.reshape(1, -1)

prediction = model.predict(input_data_reshaped)

#why use prediction[0]==R
if prediction == 'R':
  print("Rock")

else:
  print("Mine")